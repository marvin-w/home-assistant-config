  - alias: 'Close all blinds when the sun sets'
    trigger:
      platform: sun
      event: sunset
      offset: '+00:00:00'
    action:
      - service: cover.close_cover
        data:
          entity_id: group.covers
      - service: notify.notifiers
        data:
          title: Automation
          message: Deine Rolläden sind jetzt unten

  - alias: 'Get notified when garage door opens'
    trigger:
      platform: template
      value_template: "{% if states.sensor.garage_door_status.state | string == 'open' %}true{% endif %}"
    action:
      - service: notify.notifiers
        data:
          title: Warnung
          message: Deine Garage ist offen

  - alias: 'Get notified when garage door closes'
    trigger:
      platform: template
      value_template: "{% if states.sensor.garage_door_status.state | string == 'closed' %}true{% endif %}"
    action:
      - service: notify.notifiers
        data:
          title: Info
          message: Deine Garage ist jetzt geschlossen

  - alias: 'Close garage if it has been opened for longer than 7 minutes'
    initial_state: True
    trigger:
      platform: template
      value_template: "{% if (states.sensor.garage_door_time_in_state.state | string == '7m') and (states.sensor.garage_door_status.state | string == 'open') %}true{% endif %}"
    action:
      - service: cover.close_cover
        entity_id: cover.garage
      - service: notify.notifiers
        data:
          title: Warnung
          message: Deine Garage war länger als 7 Minuten offen und wurde daher automatisch geschlossen.

  - alias: 'Next trash appointment notification'
    initial_state: True
    trigger:
      - platform: template
        value_template: "{% if states.sensor.trash_appointment_days.state | int == 0 %}true{% endif %}"
    action:
      service: notify.notifiers
      data_template:
        title: "Müllleerung!"
        message: "Die nächste Müllleerung ist morgen ({{ states('sensor.trash_appointment') }}) !"

  - alias: 'Take pill reminder'
    initial_state: True
    trigger:
      - platform: template
        value_template: "{% if states.sensor.pill_reminder.state | int < 1 %}true{% endif %}"
    action:
      service: notify.pushbullet_kalo
      data_template:
        title: "Pille!"
        message: "Pille nehmen :-P."

  - alias: 'Take daily reminder'
    initial_state: True
    trigger:
      - platform: template
        value_template: "{% if states.sensor.daily_reminder.state | int < 1 %}true{% endif %}"
    action:
      service: notify.pushbullet_mwi
      data_template:
        title: "Tablette nehmen"
        message: "Tablette nehmen!"

  - alias: 'Update garage settings'
    trigger:
      platform: time_pattern
      seconds: /30
    action:
      service: mqtt.publish
      data:
        topic: "garadget/garage/command"
        payload: "get-status"

  - alias: 'Lower covers if TV starts when sun is still shining'
    initial_state: True
    trigger:
      - platform: template
        value_template: "{% if states.media_player.livingroom_tv.state | string == 'on' %}true{% endif %}"
    condition:
      - condition: state
        entity_id: 'sun.sun'
        state: 'above_horizon'
    action:
      - service: cover.set_cover_position
        data:
          entity_id: cover.wohnen_esszimmer
          position: 65
      - service: cover.set_cover_position
        data:
          entity_id: cover.kueche
          position: 65
      - service: cover.set_cover_position
        data:
          entity_id: cover.wohnen_tv
          position: 65
      - service: cover.set_cover_position
        data:
          entity_id: cover.wohnen_balkon
          position: 65

  - alias: 'Correct settings when turning on climate'
    initial_state: True
    trigger: 
      - platform: template
        value_template: "{% if states.switch.climate.state | string == 'on' %}true{% endif %}"
    action:
      - service: mqtt.publish
        data:
          topic: cmnd/tasmota/infrarot/irsend
          payload: '{"Protocol":"NEC_LIKE","Bits":32,"Data":"0x12488100","DataLSB":"0x48128100"}'
      - service: mqtt.publish
        data:
          topic: cmnd/tasmota/infrarot/irsend
          payload: '{"Protocol":"NEC_LIKE","Bits":32,"Data":"0x12188100","DataLSB":"0x48188100","Repeat":0}'
      - service: mqtt.publish
        data:
          topic: cmnd/tasmota/infrarot/irsend
          payload: '{"Protocol":"NEC_LIKE","Bits":32,"Data":"0x12188300","DataLSB":"0x4818C100","Repeat":0}'
